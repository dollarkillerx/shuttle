// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"fmt"
	"io"
	"strconv"
)

type AppInfo struct {
	AppID              string   `json:"appId"`
	AppVersion         float32  `json:"appVersion"`
	MinimumVersion     float32  `json:"minimumVersion"`
	State              AppState `json:"state"`
	ErrorNotification  string   `json:"errorNotification"`
	NormalNotification string   `json:"normalNotification"`
}

type AuthPayload struct {
	AccessTokenString string `json:"accessTokenString"`
}

type Captcha struct {
	Base64Captcha string `json:"base64Captcha"`
	CaptchaID     string `json:"captchaId"`
}

type Combo struct {
	ComboID  string  `json:"comboId"`
	Describe string  `json:"describe"`
	Traffic  int64   `json:"traffic"`
	Day      int64   `json:"day"`
	Amount   float32 `json:"amount"`
}

type Combos struct {
	Combos []Combo `json:"combos"`
}

type MountNode struct {
	NodeID     string `json:"nodeId"`
	NodeName   string `json:"nodeName"`
	Country    string `json:"country"`
	Describe   string `json:"describe"`
	MountToken string `json:"mountToken"`
}

type NodeItem struct {
	NodeID       string `json:"nodeId"`
	NodeName     string `json:"nodeName"`
	Country      string `json:"country"`
	Describe     string `json:"describe"`
	Free         bool   `json:"free"`
	MountSupport bool   `json:"mountSupport"`
}

type NodeToken struct {
	InternetAddress string       `json:"internetAddress"`
	NodeProtocol    NodeProtocol `json:"nodeProtocol"`
	WsPath          string       `json:"wsPath"`
	Token           string       `json:"token"`
}

type Nodes struct {
	Nodes      []NodeItem  `json:"nodes"`
	MountNodes []MountNode `json:"mountNodes"`
}

type Result struct {
	Ok bool `json:"ok"`
}

type SendEmailRequest struct {
	Email       string `json:"email"`
	CaptchaID   string `json:"captchaId"`
	CaptchaCode string `json:"captchaCode"`
}

type SendEmailResponse struct {
	CaptchaID string `json:"captchaId"`
}

type UserInformation struct {
	Os            Os     `json:"os"`
	Token         string `json:"token"`
	DeviceName    string `json:"deviceName"`
	DeviceID      string `json:"deviceId"`
	AppID         string `json:"appId"`
	Vip           bool   `json:"vip"`
	ComboID       string `json:"comboId"`
	DaysLeft      int64  `json:"daysLeft"`
	RemainingFlow int64  `json:"remainingFlow"`
}

type UserRegistration struct {
	CaptchaID   string `json:"captchaId"`
	CaptchaCode string `json:"captchaCode"`
	Os          Os     `json:"os"`
	Token       string `json:"token"`
	DeviceName  string `json:"deviceName"`
	DeviceID    string `json:"deviceId"`
	AppID       string `json:"appId"`
}

type AppState string

const (
	AppStateEnable   AppState = "Enable"
	AppStateDisabled AppState = "Disabled"
)

var AllAppState = []AppState{
	AppStateEnable,
	AppStateDisabled,
}

func (e AppState) IsValid() bool {
	switch e {
	case AppStateEnable, AppStateDisabled:
		return true
	}
	return false
}

func (e AppState) String() string {
	return string(e)
}

func (e *AppState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppState", str)
	}
	return nil
}

func (e AppState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NodeProtocol string

const (
	NodeProtocolWss NodeProtocol = "WSS"
	NodeProtocolRPC NodeProtocol = "RPC"
)

var AllNodeProtocol = []NodeProtocol{
	NodeProtocolWss,
	NodeProtocolRPC,
}

func (e NodeProtocol) IsValid() bool {
	switch e {
	case NodeProtocolWss, NodeProtocolRPC:
		return true
	}
	return false
}

func (e NodeProtocol) String() string {
	return string(e)
}

func (e *NodeProtocol) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NodeProtocol(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NodeProtocol", str)
	}
	return nil
}

func (e NodeProtocol) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Os string

const (
	OsIos     Os = "Ios"
	OsAndroid Os = "Android"
	OsMacos   Os = "Macos"
	OsWindows Os = "Windows"
)

var AllOs = []Os{
	OsIos,
	OsAndroid,
	OsMacos,
	OsWindows,
}

func (e Os) IsValid() bool {
	switch e {
	case OsIos, OsAndroid, OsMacos, OsWindows:
		return true
	}
	return false
}

func (e Os) String() string {
	return string(e)
}

func (e *Os) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Os(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OS", str)
	}
	return nil
}

func (e Os) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
