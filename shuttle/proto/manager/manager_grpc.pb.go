// Code generated by protoc-gen-go-rpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-rpc v1.2.0
// - protoc             v3.21.12
// source: proto/manager/manager.proto

package manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the rpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GuardLinkManagerClient is the client API for GuardLinkManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuardLinkManagerClient interface {
	// 1. 注册节点
	NodeRegistration(ctx context.Context, in *NodeRegistrationRequest, opts ...grpc.CallOption) (*NodeRegistrationResponse, error)
	// 2. 上报流量
	TrafficReport(ctx context.Context, in *TrafficReportRequest, opts ...grpc.CallOption) (*TrafficReportResponse, error)
}

type guardLinkManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGuardLinkManagerClient(cc grpc.ClientConnInterface) GuardLinkManagerClient {
	return &guardLinkManagerClient{cc}
}

func (c *guardLinkManagerClient) NodeRegistration(ctx context.Context, in *NodeRegistrationRequest, opts ...grpc.CallOption) (*NodeRegistrationResponse, error) {
	out := new(NodeRegistrationResponse)
	err := c.cc.Invoke(ctx, "/proto.GuardLinkManager/NodeRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardLinkManagerClient) TrafficReport(ctx context.Context, in *TrafficReportRequest, opts ...grpc.CallOption) (*TrafficReportResponse, error) {
	out := new(TrafficReportResponse)
	err := c.cc.Invoke(ctx, "/proto.GuardLinkManager/TrafficReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuardLinkManagerServer is the server API for GuardLinkManager service.
// All implementations must embed UnimplementedGuardLinkManagerServer
// for forward compatibility
type GuardLinkManagerServer interface {
	// 1. 注册节点
	NodeRegistration(context.Context, *NodeRegistrationRequest) (*NodeRegistrationResponse, error)
	// 2. 上报流量
	TrafficReport(context.Context, *TrafficReportRequest) (*TrafficReportResponse, error)
	mustEmbedUnimplementedGuardLinkManagerServer()
}

// UnimplementedGuardLinkManagerServer must be embedded to have forward compatible implementations.
type UnimplementedGuardLinkManagerServer struct {
}

func (UnimplementedGuardLinkManagerServer) NodeRegistration(context.Context, *NodeRegistrationRequest) (*NodeRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeRegistration not implemented")
}
func (UnimplementedGuardLinkManagerServer) TrafficReport(context.Context, *TrafficReportRequest) (*TrafficReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrafficReport not implemented")
}
func (UnimplementedGuardLinkManagerServer) mustEmbedUnimplementedGuardLinkManagerServer() {}

// UnsafeGuardLinkManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuardLinkManagerServer will
// result in compilation errors.
type UnsafeGuardLinkManagerServer interface {
	mustEmbedUnimplementedGuardLinkManagerServer()
}

func RegisterGuardLinkManagerServer(s grpc.ServiceRegistrar, srv GuardLinkManagerServer) {
	s.RegisterService(&GuardLinkManager_ServiceDesc, srv)
}

func _GuardLinkManager_NodeRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardLinkManagerServer).NodeRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GuardLinkManager/NodeRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardLinkManagerServer).NodeRegistration(ctx, req.(*NodeRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuardLinkManager_TrafficReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrafficReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardLinkManagerServer).TrafficReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GuardLinkManager/TrafficReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardLinkManagerServer).TrafficReport(ctx, req.(*TrafficReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GuardLinkManager_ServiceDesc is the grpc.ServiceDesc for GuardLinkManager service.
// It's only intended for direct use with rpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuardLinkManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GuardLinkManager",
	HandlerType: (*GuardLinkManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeRegistration",
			Handler:    _GuardLinkManager_NodeRegistration_Handler,
		},
		{
			MethodName: "TrafficReport",
			Handler:    _GuardLinkManager_TrafficReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/manager/manager.proto",
}
