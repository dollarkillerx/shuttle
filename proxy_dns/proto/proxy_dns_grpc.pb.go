// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/proxy_dns.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxyDnsClient is the client API for ProxyDns service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyDnsClient interface {
	Dig(ctx context.Context, in *DigRequest, opts ...grpc.CallOption) (*DigResponse, error)
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type proxyDnsClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyDnsClient(cc grpc.ClientConnInterface) ProxyDnsClient {
	return &proxyDnsClient{cc}
}

func (c *proxyDnsClient) Dig(ctx context.Context, in *DigRequest, opts ...grpc.CallOption) (*DigResponse, error) {
	out := new(DigResponse)
	err := c.cc.Invoke(ctx, "/proto.ProxyDns/Dig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyDnsClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/proto.ProxyDns/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyDnsServer is the server API for ProxyDns service.
// All implementations must embed UnimplementedProxyDnsServer
// for forward compatibility
type ProxyDnsServer interface {
	Dig(context.Context, *DigRequest) (*DigResponse, error)
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedProxyDnsServer()
}

// UnimplementedProxyDnsServer must be embedded to have forward compatible implementations.
type UnimplementedProxyDnsServer struct {
}

func (UnimplementedProxyDnsServer) Dig(context.Context, *DigRequest) (*DigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dig not implemented")
}
func (UnimplementedProxyDnsServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedProxyDnsServer) mustEmbedUnimplementedProxyDnsServer() {}

// UnsafeProxyDnsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyDnsServer will
// result in compilation errors.
type UnsafeProxyDnsServer interface {
	mustEmbedUnimplementedProxyDnsServer()
}

func RegisterProxyDnsServer(s grpc.ServiceRegistrar, srv ProxyDnsServer) {
	s.RegisterService(&ProxyDns_ServiceDesc, srv)
}

func _ProxyDns_Dig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyDnsServer).Dig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProxyDns/Dig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyDnsServer).Dig(ctx, req.(*DigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyDns_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyDnsServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProxyDns/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyDnsServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyDns_ServiceDesc is the grpc.ServiceDesc for ProxyDns service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyDns_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProxyDns",
	HandlerType: (*ProxyDnsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dig",
			Handler:    _ProxyDns_Dig_Handler,
		},
		{
			MethodName: "Hello",
			Handler:    _ProxyDns_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proxy_dns.proto",
}
